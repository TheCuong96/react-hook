{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction colorRandom(colorCurrent) {\n  const COLORLIST = ['green', 'red', 'blue', 'yellow'];\n  const colorRefIndex = COLORLIST.indexOf(colorCurrent); // let random = Math.trunc(Math.random() * 4);\n\n  while (random === colorRefIndex) {\n    let random = Math.trunc(Math.random() * 4);\n  }\n\n  const colorFinal = COLORLIST[random];\n  console.log(colorFinal);\n  return colorFinal;\n}\n\nfunction useMagicColor(props) {\n  _s();\n\n  const [color, setColor] = useState('transparent');\n  const colorRef = useRef('transparent');\n  useEffect(() => {\n    const timeOutColor = setInterval(() => {\n      const newColor = colorRandom(colorRef.current);\n      setColor(newColor);\n      colorRef.current = newColor;\n    }, 1000);\n    return () => {\n      clearInterval(timeOutColor);\n    };\n  }, []);\n  return color;\n}\n\n_s(useMagicColor, \"LHFLQmXLilJod3+lDlN+jcjcbII=\");\n\nexport default useMagicColor;","map":{"version":3,"sources":["/Volumes/Data/hook/react-hook-basic/src/hooks/useMagicColor.js"],"names":["React","useEffect","useRef","useState","PropTypes","colorRandom","colorCurrent","COLORLIST","colorRefIndex","indexOf","random","Math","trunc","colorFinal","console","log","useMagicColor","props","color","setColor","colorRef","timeOutColor","setInterval","newColor","current","clearInterval"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAGA,SAASC,WAAT,CAAqBC,YAArB,EAAkC;AAC9B,QAAMC,SAAS,GAAG,CAAC,OAAD,EAAS,KAAT,EAAe,MAAf,EAAsB,QAAtB,CAAlB;AACA,QAAMC,aAAa,GAAGD,SAAS,CAACE,OAAV,CAAkBH,YAAlB,CAAtB,CAF8B,CAI9B;;AAEA,SAAMI,MAAM,KAAKF,aAAjB,EAA+B;AAC3B,QAAIE,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgB,CAA3B,CAAb;AACH;;AACD,QAAMG,UAAU,GAAGN,SAAS,CAACG,MAAD,CAA5B;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,SAAOA,UAAP;AACH;;AAED,SAASG,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAC1B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,aAAD,CAAlC;AACA,QAAMiB,QAAQ,GAAGlB,MAAM,CAAC,aAAD,CAAvB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMoB,YAAY,GAAGC,WAAW,CAAC,MAAK;AAClC,YAAMC,QAAQ,GAAGlB,WAAW,CAACe,QAAQ,CAACI,OAAV,CAA5B;AACAL,MAAAA,QAAQ,CAACI,QAAD,CAAR;AACAH,MAAAA,QAAQ,CAACI,OAAT,GAAmBD,QAAnB;AACH,KAJ+B,EAI9B,IAJ8B,CAAhC;AAKA,WAAO,MAAM;AACTE,MAAAA,aAAa,CAACJ,YAAD,CAAb;AACH,KAFD;AAGH,GATQ,EASN,EATM,CAAT;AAWA,SAAOH,KAAP;AACH;;GAfQF,a;;AAiBT,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nfunction colorRandom(colorCurrent){\n    const COLORLIST = ['green','red','blue','yellow'];\n    const colorRefIndex = COLORLIST.indexOf(colorCurrent)\n    \n    // let random = Math.trunc(Math.random() * 4);\n\n    while(random === colorRefIndex){\n        let random = Math.trunc(Math.random() * 4);\n    }\n    const colorFinal = COLORLIST[random];\n\n    console.log(colorFinal);\n    return colorFinal;\n}\n\nfunction useMagicColor(props) {\n    const [color, setColor] = useState('transparent');\n    const colorRef = useRef('transparent');\n    useEffect(() => {\n        const timeOutColor = setInterval(() =>{\n            const newColor = colorRandom(colorRef.current);\n            setColor(newColor);\n            colorRef.current = newColor;\n        },1000)\n        return () => {\n            clearInterval(timeOutColor);\n        };\n    }, []);\n\n    return color;\n}\n\nexport default useMagicColor;"]},"metadata":{},"sourceType":"module"}